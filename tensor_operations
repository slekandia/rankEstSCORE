import numpy as np


def mat2tens(mat, size, mode):
    """
    Reshapes the matrix into a tensor according to the n-th mode.

    Input: mat a matrix
           mode is the axis which the permuting operation will be done
           size the final size of the tensor
    Output: the tensor of dimension size.
    """
    out_shape = list(size)
    out_shape[mode] = out_shape[0]
    out_shape[0] = mat.shape[0]
    tens = np.reshape(mat, out_shape)
    return np.swapaxes(tens, 0, mode)


def tens2mat(tensor, mode):
    """
    Contracts a tens according to the n-th mode.

    Input: tens of size
           mode is the axis at which the tensor will be contracted
    Output: the tensor matrix product where the ith dimension is replaced by the row dimension of the matrix
    """
    d = tensor.shape
    nd = len(tensor.shape)
    assert mode < nd, "The mode should be less than the dimension of the tensor"

    # Compute the mode-k matricization
    row_d = d[mode]
    return np.swapaxes(tensor, 0, mode).reshape(row_d, -1)


def tmprod(tensor, mat, mode):
    """
    Computes the mode-n product of a tensor and a matrix.

    Input: Tensor an n-dimensional tensor
           mat a matrix
    Output: The resulting tensor matrix product.

    """
    out_n = np.matmul(mat, tens2mat(tensor, mode))
    out_shape = list(tensor.shape)
    out_shape[mode] = mat.shape[0]
    return mat2tens(out_n, out_shape, mode)


def mlsvd(tensor):
    """
    Computes the multilinear singular value decomposition of a tensor and returns the core matrices and the factor
    matrices.

    Input: an N dimensional tensor

    Output: the core matrices, a list of factor matrices, and the singular values in each unfolding
    """
    factors = []
    singular_values = []
    nd = len(tensor.shape)

    for n in range(nd):
        tensor_n = tens2mat(tensor, n)
        U, S, Vt = np.linalg.svd(tensor_n, full_matrices=False)
        factors.append(U)
        singular_values.append(S)
        if n == 0:
            core = tmprod(tensor, U.conj().T, n)
        else:
            core = tmprod(core, U.conj().T, n)
    return factors, core, singular_values


def lmlragen(U, S):
    """
    Returns the tensor T that multiplies each factor matrix in U in the corresponding mode with the core matrix S

    Input:
        U : List of the factor matrices
        S : The core tensor
    Output:
        T: The tensor that is the multiplication each factor matrix in U in the corresponding mode with
         the core matrix S
    """
    nd = len(U)
    for n in range(nd):
        if n == 0:
            T = tmprod(S, U[n], n)
        else:
            T = tmprod(T, U[n], n)
    return T


def generate(size_tens, rank_tens):
    """
    Returns a random tensor of size "size_tens" with the rank "rank_tens". The core and the factor matrices are sampled
    from the normal distribution with variance 1. In addition, the factor matrices are randomized according to the Haar
    measure.

    Input:
        size_tens: the size of the tensor
        rank_tens: the n-rank of the tensor
    Output:
        the random tensor of size "size_tens" with the rank "rank_tens"
    """
    s = np.random.normal(0, 1, size=rank_tens)
    u_list = []
    for i in range(len(size_tens)):
        u = np.random.normal(0, 1, size=[size_tens[0],
                                         rank_tens[0]])
        # Haar measure
        q, r = np.linalg.qr(u)
        u = q @ np.diag(np.sign(np.diag(r)))
        u_list.append(u)
    return lmlragen(u_list, s)

